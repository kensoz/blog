import{_ as p,o,c,a as n,d as e,e as a,b as s,r as l}from"./app.a5ec93c6.js";const i={},u=a('<h1 id="\u305D\u306E\u4ED6\u306E\u30B3\u30FC\u30C6\u3099\u30A3\u30F3\u30AF\u3099\u30C6\u30B9\u30C8\u30B5\u30A4\u30C8" tabindex="-1"><a class="header-anchor" href="#\u305D\u306E\u4ED6\u306E\u30B3\u30FC\u30C6\u3099\u30A3\u30F3\u30AF\u3099\u30C6\u30B9\u30C8\u30B5\u30A4\u30C8" aria-hidden="true">#</a> \u305D\u306E\u4ED6\u306E\u30B3\u30FC\u30C7\u30A3\u30F3\u30B0\u30C6\u30B9\u30C8\u30B5\u30A4\u30C8</h1><p><img src="https://img.shields.io/badge/-Typescript-9ca3af.svg?logo=typescript&amp;style=popout-square" alt=""> <img src="https://img.shields.io/badge/-Javascript-9ca3af.svg?logo=javascript&amp;style=popout-square" alt=""></p><h2 id="codility" tabindex="-1"><a class="header-anchor" href="#codility" aria-hidden="true">#</a> Codility</h2>',3),r={href:"https://app.codility.com/programmers/lessons/1-iterations/",target:"_blank",rel:"noopener noreferrer"},k=s("URL"),d=n("li",null,[n("code",null,"return"),s("\u89E3\u7B54\u3001\u5165\u529B\u306E\u51E6\u7406\u304C\u7279\u306B\u5FC5\u8981\u306A\u3044")],-1),v=n("li",null,[n("strong",null,"Node.js"),s(": "),n("code",null,"v14"),s(" ES6\u5BFE\u5FDC\u53EF\u80FD")],-1),m=a(`<h3 id="lessons-2-arrays-cyclicrotation" tabindex="-1"><a class="header-anchor" href="#lessons-2-arrays-cyclicrotation" aria-hidden="true">#</a> LESSONS.2 Arrays -CyclicRotation</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5343\u4E07\u522B\u5FD8\u4E86\u5883\u754C\u503C</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">K</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">A</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">K</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hackerrank" tabindex="-1"><a class="header-anchor" href="#hackerrank" aria-hidden="true">#</a> HackerRank</h2>`,3),b={href:"https://www.hackerrank.com/dashboard",target:"_blank",rel:"noopener noreferrer"},h=s("URL"),g=n("li",null,[s("\u984C\u540D\u306E\u95A2\u6570\u3067"),n("code",null,"return"),s("\u89E3\u7B54\u3001\u5165\u529B\u306E\u51E6\u7406\u304C\u7279\u306B\u5FC5\u8981\u306A\u3044\u3001"),n("code",null,"main"),s("\u95A2\u6570\u3067\u30B7\u30B9\u30C6\u30E0\u5224\u5B9A")],-1),y=n("li",null,[n("strong",null,"CSS"),s("\u3001"),n("strong",null,"React"),s("\u306E\u554F\u984C\u3042\u308A")],-1),f=a(`<h3 id="prepare-easy-solve-me-first" tabindex="-1"><a class="header-anchor" href="#prepare-easy-solve-me-first" aria-hidden="true">#</a> Prepare - Easy.Solve Me First</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solveMeFirst</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prepare-easy-simple-array-sum" tabindex="-1"><a class="header-anchor" href="#prepare-easy-simple-array-sum" aria-hidden="true">#</a> Prepare - Easy.Simple Array Sum</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">simpleArraySum</span><span class="token punctuation">(</span><span class="token parameter">ar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> ar<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new-year-chaos" tabindex="-1"><a class="header-anchor" href="#new-year-chaos" aria-hidden="true">#</a> New Year Chaos</h3>`,5),w={href:"https://www.hackerrank.com/challenges/new-year-chaos/problem",target:"_blank",rel:"noopener noreferrer"},_=s("LINK"),x=a(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">minimumBribes</span><span class="token punctuation">(</span>q<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> bribes<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> q<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> originalPosition<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>originalPosition <span class="token operator">-</span> i <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Too chaotic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> originalPosition <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				bribes<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bribes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="codewars" tabindex="-1"><a class="header-anchor" href="#codewars" aria-hidden="true">#</a> Codewars</h2>`,2),j={href:"https://www.codewars.com/",target:"_blank",rel:"noopener noreferrer"},S=s("URL"),A=n("li",null,[n("code",null,"return"),s("\u89E3\u7B54\u3001\u5165\u529B\u306E\u51E6\u7406\u304C\u7279\u306B\u5FC5\u8981\u306A\u3044")],-1),q=n("li",null,[n("strong",null,"Node.js"),s(": "),n("code",null,"v14"),s(" ES6\u5BFE\u5FDC\u53EF\u80FD")],-1),R=a(`<h3 id="practice-gravity-flip" tabindex="-1"><a class="header-anchor" href="#practice-gravity-flip" aria-hidden="true">#</a> Practice - Gravity-Flip</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">flip</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">===</span> <span class="token string">&quot;R&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">===</span> <span class="token string">&quot;L&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="practice-check-same-case" tabindex="-1"><a class="header-anchor" href="#practice-check-same-case" aria-hidden="true">#</a> Practice - Check same case</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sameCase</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">AZ</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> az <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">STR</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Za-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">STR</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">STR</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">AZ</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">AZ</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>az<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> az<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="track" tabindex="-1"><a class="header-anchor" href="#track" aria-hidden="true">#</a> Track</h2><ul><li><code>console.log(\u89E3\u7B54)</code>\u3001\u5165\u529B\u306E\u51E6\u7406\u304C\u5FC5\u8981</li><li>\u6A19\u6E96\u5165\u529B\uFF08\u6570\u636E\u90FD\u662F\u4E00\u884C\u4E00\u884C\u7684\uFF0C\u8BFB\u53D6\u4E4B\u540E\u653E\u5230lines\u6570\u7EC4\u91CC\u9762\uFF0C\u4E00\u884C\u5C31\u662F\u4E00\u4E2A\u6570\u7EC4\u5143\u7D20\uFF0C\u6709\u70B9\u50CFpaiza\uFF09</li><li>\u4EE5\u4E0B\u306F\u5165\u529B\u4FEE\u6B63\u3001<code>X</code>\u306F<code>lines</code>\u306E\u30BF\u30A4\u30D7\u3001<code>lines</code>\u8FFD\u52A0\u5FC5\u8981</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ---------- Q1 ----------</span>

<span class="token doc-comment comment">/**
 * \u6A19\u6E96\u5165\u529B\u51E6\u7406\u95A2\u6570
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span> X <span class="token punctuation">}</span> lines
 */</span>
<span class="token keyword">const</span> readFromStdin <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">X</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunk <span class="token keyword">of</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> chunk
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * \u30BD\u30EA\u30E5\u30FC\u30B7\u30E7\u30F3\u95A2\u6570
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span> X <span class="token punctuation">}</span> lines
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span> void <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">const</span> solution <span class="token operator">=</span> <span class="token punctuation">(</span>lines<span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log()</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5B9F\u884C</span>
<span class="token function">readFromStdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function E(N,C){const t=l("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[k,e(t)])]),d,v]),m,n("ul",null,[n("li",null,[n("a",b,[h,e(t)])]),g,y]),f,n("p",null,[n("a",w,[_,e(t)])]),x,n("ul",null,[n("li",null,[n("a",j,[S,e(t)])]),A,q]),R])}var P=p(i,[["render",E],["__file","other.html.vue"]]);export{P as default};
